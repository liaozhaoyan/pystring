package.path = "../src/?.lua;" .. package.path
package.cpath = "../src/?.so;" .. package.cpath

local require = require
local cpystring = require("cpystring")
local assert = assert

--#region test count
assert(cpystring.count("hello lua language", "l") == 4)
assert(cpystring.count("hello lua language", " ") == 2)
assert(cpystring.count("hello lua language", "ua") == 2)
assert(cpystring.count("hello lua language", "lan") == 1)
assert(cpystring.count("hello lua language", "") == 0)
assert(cpystring.count("hello lua language", "\n") == 0)
assert(cpystring.count("hello lua language", "a") == 3)
assert(cpystring.count("hello lua \0language", "a") == 3)
assert(cpystring.count("hello\0wolrd", "o") == 2)

assert(cpystring.count("hello lua language", "l", 1) == 4)
assert(cpystring.count("hello lua language", "l", 2) == 4)
assert(cpystring.count("hello lua language", "l", 3) == 4)
assert(cpystring.count("hello lua language", "l", 4) == 3)
assert(cpystring.count("hello lua language", "l", -8) == 1)
assert(cpystring.count("hello lua language", "l", -1) == 0)
assert(cpystring.count("hello lua language", "e", -1) == 1)
assert(cpystring.count("hello lua language", "l", -1) == 0)
assert(cpystring.count("hello lua language", "l", -128) == 4)
assert(cpystring.count("hello lua language", "l", 128) == 0)
assert(cpystring.count("hello lua language", "e", 128) == 0)
assert(cpystring.count("hello lua language", "h", -128) == 1)
assert(cpystring.count("hello lua language", "h", 128) == 0)
assert(cpystring.count("hello\0wolrd", "o", 6) == 1)

assert(cpystring.count("hello lua language", "l", nil, -1) == 4)
assert(cpystring.count("hello lua language", "l", 1, -8) == 4)
assert(cpystring.count("hello lua language", "l", nil, -9) == 3)
assert(cpystring.count("hello lua language", "l", 1, -128) == 0)

assert(cpystring.count("hello lua language", "l", 1, 4) == 2)
assert(cpystring.count("hello lua language", "l", 1, 5) == 2)
assert(cpystring.count("hello lua language", "l", 1, 6) == 2)
assert(cpystring.count("hello lua language", "l", 1, 7) == 3)
assert(cpystring.count("hello lua language", "l", 2, 7) == 3)
assert(cpystring.count("hello lua language", "l", 3, 7) == 3)
assert(cpystring.count("hello lua language", "l", -8, -1) == 1)
assert(cpystring.count("hello lua language", "l", -8, -2) == 1)
assert(cpystring.count("hello lua language", "l", -1, -1) == 0)
assert(cpystring.count("hello lua language", "e", -1, -1) == 1)
assert(cpystring.count("hello lua language", "l", -1, 1) == 0)
assert(cpystring.count("hello lua language", "h", 1, 1) == 1)
assert(cpystring.count("hello lua language", "e", 1, 1) == 0)
assert(cpystring.count("hello lua language", "e", 1, 2) == 1)

--#region test find
assert(cpystring.find("hello lua language", "l") == 3)
assert(cpystring.find("hello world.", "hello") == 1)
assert(cpystring.find("hello world.", "hEllo") == -1)
assert(cpystring.find("hello world.", "") == -1)
assert(cpystring.find("hello world.", " ") == 6)
assert(cpystring.find("hello world.", ".") == 12)

-- #region test rfind
local s = "hello world hello."
assert(cpystring.rfind("hello world hello.", "hello") == 13)
assert(cpystring.rfind("hello world hello.", "hEllo") == -1)
assert(cpystring.rfind("hello world hello.", " ") == 12)
assert(cpystring.rfind("hello world hello.", ".") == 18)
assert(cpystring.rfind("hello world hello.", "") == -1)
assert(cpystring.rfind("hello world hello.", "\n") == -1)
local largeStr = string.rep("a", 1024 * 1024) .. "del" .. "b" .. "del" .. "c"
assert(cpystring.rfind(largeStr, "del") == #largeStr - 3)

--#region test replace
assert(cpystring.replace("hello world", "world", "lua") == "hello lua")
assert(cpystring.replace("hello world", "world", "lua", 1) == "hello lua")
assert(cpystring.replace("hello world", "world", "lua", 2) == "hello lua")
assert(cpystring.replace("hello world world", "world", "lua") == "hello lua lua")
assert(cpystring.replace("hello world world.", "world", "lua") == "hello lua lua.")
assert(cpystring.replace("hello world world", "world", "lua", 1) == "hello lua world")
assert(cpystring.replace("hello world world", "world", "lua", 2) == "hello lua lua")
assert(cpystring.replace("hello world world", " ", "*") == "hello*world*world")
assert(cpystring.replace("hello world world", " ", "*", 1) == "hello*world world")
assert(cpystring.replace("hello world world", "h", "*") == "*ello world world")

--#region test rreplace
assert(cpystring.rreplace("hello world", "world", "lua") == "hello lua")
assert(cpystring.rreplace("hello world", "world", "lua", 1) == "hello lua")
assert(cpystring.rreplace("hello world", "world", "lua", 2) == "hello lua")
assert(cpystring.rreplace("hello world world.", "world", "lua") == "hello lua lua.")
assert(cpystring.rreplace("hello world world.", "world", "lua", 1) == "hello world lua.")
assert(cpystring.rreplace("hello world world.", "world", "lua", 2) == "hello lua lua.")
assert(cpystring.rreplace("hello world world.", " ", "*") == "hello*world*world.")
assert(cpystring.rreplace("hello world world.", " ", "*", 1) == "hello world*world.")

--#region test startwith
assert(cpystring.startswith("hello world", "hello"))
assert(cpystring.startswith("hello world", "hello "))
assert(not cpystring.startswith("hello world", "world"))
assert(not cpystring.startswith("hello world", "world "))
assert(not cpystring.startswith("hello world", "hEllo"))
assert(cpystring.startswith("hello world", ""))
assert(not cpystring.startswith("hello world", " "))
assert(not cpystring.startswith("hello world", "\n"))
assert(not cpystring.startswith("hello world", "hello ", 2))
assert(cpystring.startswith("hello world", "ello ", 2))
assert(cpystring.startswith("hello world", "hello", nil, -2))

--#region test endwith
assert(cpystring.endswith("hello world", "world"))
assert(not cpystring.endswith("hello world", "hello"))
assert(not cpystring.endswith("hello world", "hello "))
assert(not cpystring.endswith("hello world", "hEllo"))
assert(cpystring.endswith("hello world", ""))
assert(not cpystring.endswith("hello world", " "))
assert(not cpystring.endswith("hello world", "\n"))
assert(not cpystring.endswith("hello world", "world "))
assert(cpystring.endswith("hello world", "world", 2))
assert(cpystring.endswith("hello world", "worl", nil, -2))

--#region test shift
assert(cpystring.shift("abcd", 1) == "dabc")
assert(cpystring.shift("abcd", -1) == "bcda")
assert(cpystring.shift("abcd", -2) == "cdab")
assert(cpystring.shift("abcd", 2) == "cdab")

--#region test swapcase
assert(cpystring.swapcase("Hello, World!") == "hELLO, wORLD!")
assert(cpystring.swapcase("1234") == "1234")
assert(cpystring.swapcase("hello") == "HELLO")
assert(cpystring.swapcase("Hello") == "hELLO")

--#region test split
local res
res = cpystring.split("", " ")
assert(#res == 1 and res[1] == "")
res = cpystring.split(" ", "")
assert(#res == 1 and res[1] == " ")
res = cpystring.split(" ", nil)
assert(#res == 0)
res = cpystring.split("     ")
assert(#res == 0)
res = cpystring.split("hello world")
assert(#res == 2 and res[1] == "hello" and res[2] == "world")
res = cpystring.split("hello world ")
assert(#res == 2 and res[1] == "hello" and res[2] == "world")
res = cpystring.split("hello world  ")
assert(#res == 2 and res[1] == "hello" and res[2] == "world")
res = cpystring.split("hello world    \t\n\r")
assert(#res == 2 and res[1] == "hello" and res[2] == "world")
res = cpystring.split(" hello world")
assert(#res == 2 and res[1] == "hello" and res[2] == "world")
res = cpystring.split("hello        world")
assert(#res == 2 and res[1] == "hello" and res[2] == "world")
res = cpystring.split("  hello     \t\n\r\f\v   world   ")
assert(#res == 2 and res[1] == "hello" and res[2] == "world")
res = cpystring.split("  hello world  . ", nil,  1)
assert(#res == 2 and res[1] == "hello" and res[2] == "world  . ")
res = cpystring.split("  hello       \t\n\r\f\v   world  . ", nil,  1)
assert(#res == 2 and res[1] == "hello" and res[2] == "world  . ")
res = cpystring.split("  hello       \t\n\r\f\v   world  . ")
assert(#res == 3 and res[1] == "hello" and res[2] == "world" and res[3] == ".")
res = cpystring.split("hello world", " ")
assert(#res == 2 and res[1] == "hello" and res[2] == "world")
res = cpystring.split("hello world hello", " ")
assert(#res == 3 and res[1] == "hello" and res[2] == "world" and res[3] == "hello")
res = cpystring.split("hello world hello", " ", 1)
assert(#res == 2 and res[1] == "hello" and res[2] == "world hello")
res = cpystring.split("     ", " ")
assert(#res == 6 and res[1] == "" and res[2] == "" and res[3] == "" and res[4] == "" and res[5] == "")
res = cpystring.split("     ", " ", 1)
assert(#res == 2 and res[1] == "" and res[2] == "    ")
res = cpystring.split("Node 0, zone      DMA      1      0      0      1      2      1      1      0      1      1      3")
assert(#res == 15)
assert(res[1] == "Node" and res[2] == "0," and res[3] == "zone" and res[14] == "1" and res[15] == "3")
res = cpystring.split("hello*lua *language", "*l")
assert(#res == 3 and res[1] == "hello" and res[2] == "ua " and res[3] == "anguage")
res = cpystring.split("hello*lua *language", "*l", 1)
assert(#res == 2 and res[1] == "hello" and res[2] == "ua *language")
res = cpystring.split("hello*lua*l", "*l")
assert(#res == 3 and res[1] == "hello" and res[2] == "ua" and res[3] == "")
res = cpystring.split("hello*lua*l", "*l", 2)
assert(#res == 3 and res[1] == "hello" and res[2] == "ua" and res[3] == "")
res = cpystring.split("hello*lua*lb", "b")
assert(#res == 2 and res[1] == "hello*lua*l" and res[2] == "")
local ss
ss = "abc\r\nabc\r\nabc"
res = cpystring.split(ss, "\r\n", 1)
assert(#res == 2 and res[1] == "abc" and res[2] == "abc\r\nabc")
ss = "你好\r\n你好\r\n 你好"
res = cpystring.split(ss, "\r\n", 1)
assert(#res == 2 and res[1] == "你好" and res[2] == "你好\r\n 你好")
res = cpystring.split(ss, "\r\n")
assert(#res == 3 and res[1] == "你好" and res[2] == "你好" and res[3] == " 你好")


--#region test reverse list
res = cpystring.reverse_list({1, 2, 3})
assert(#res == 3 and res[1] == 3 and res[2] == 2 and res[3] == 1)
res = cpystring.reverse_list({1, 2, 3, 4})
assert(#res == 4 and res[1] == 4 and res[2] == 3 and res[3] == 2 and res[4] == 1)

--#region test rsplit
res = cpystring.rsplit("", " ")
assert(#res == 1 and res[1] == "")
res = cpystring.rsplit(" ", "")
assert(#res == 1 and res[1] == " ")
res = cpystring.rsplit(" ", nil)
assert(#res == 0)
res = cpystring.rsplit("     ")
assert(#res == 0)
res = cpystring.rsplit("hello world")
assert(#res == 2 and res[1] == "hello" and res[2] == "world")
res = cpystring.rsplit("hello world hello", nil, 1)
assert(#res == 2 and res[1] == "hello world" and res[2] == "hello")
res = cpystring.rsplit("hello world    \t\n\r")
assert(#res == 2 and res[1] == "hello" and res[2] == "world")
res = cpystring.rsplit("hello world    \t\n\r.")
assert(#res == 3 and res[1] == "hello" and res[2] == "world" and res[3] == ".")
res = cpystring.rsplit("hello world    \t\n\r.", nil, 1)
assert(#res == 2 and res[1] == "hello world" and res[2] == ".")
res = cpystring.rsplit("     ", " ")
assert(#res == 6 and res[1] == "" and res[2] == "" and res[3] == "" and res[4] == "" and res[5] == "")
res = cpystring.rsplit("     ", " ", 1)
assert(#res == 2 and res[1] == "    " and res[2] == "")
res = cpystring.rsplit("hello world", "o", 1)
assert(#res == 2 and res[1] == "hello w" and res[2] == "rld")
res = cpystring.rsplit("hello world", "o", 2)
assert(#res == 3 and res[1] == "hell" and res[2] == " w" and res[3] == "rld")
res = cpystring.rsplit("hello*lua *language", "*l")
assert(#res == 3 and res[1] == "hello" and res[2] == "ua " and res[3] == "anguage")
res = cpystring.rsplit("hello*lua *language", "*l", 1)
assert(#res == 2 and res[1] == "hello*lua " and res[2] == "anguage")
res = cpystring.rsplit("hello*lua*l", "*l")
assert(#res == 3 and res[1] == "hello" and res[2] == "ua" and res[3] == "")
res = cpystring.rsplit("hello*lua*l", "he")
assert(#res == 2 and res[1] == "" and res[2] == "llo*lua*l")
res = cpystring.rsplit("hello*lua*l", "h")
assert(#res == 2 and res[1] == "" and res[2] == "ello*lua*l")

--#region test center
assert(cpystring.center("hello", 10) == "  hello   ")
assert(cpystring.center("hello", 10, "*") == "**hello***")
assert(cpystring.center("hello", 4, "*") == "hello")
assert(cpystring.center("hello", 6, "*") == "hello*")

-- #region test ljust
assert(cpystring.ljust("hello", 10) == "hello     ")
assert(cpystring.ljust("hello", 10, "*") == "hello*****")
assert(cpystring.ljust("hello", 4) == "hello")
assert(cpystring.ljust("hello", 6, "*") == "hello*")

-- #region test rjust
assert(cpystring.rjust("hello", 10) == "     hello")
assert(cpystring.rjust("hello", 10, "*") == "*****hello")
assert(cpystring.rjust("hello", 4) == "hello")
assert(cpystring.rjust("hello", 6, "*") == "*hello")

-- #region test join
assert(cpystring.join(" ", {"hello", "world"}) == "hello world")
assert(cpystring.join("", {"hello", "world"}) == "helloworld")

-- #region test partition
local arg1, arg2, arg3
arg1, arg2, arg3 = cpystring.partition("hello world", " ")
assert(arg1 == "hello" and arg2 == " " and arg3 == "world")
arg1, arg2, arg3 = cpystring.partition("hello", " ")
assert(arg1 == "hello" and arg2 == "" and arg3 == "")
arg1, arg2, arg3 = cpystring.partition("hello world", "o")
assert(arg1 == "hell" and arg2 == "o" and arg3 == " world")
arg1, arg2, arg3 = cpystring.partition("hello world", "d")
assert(arg1 == "hello worl" and arg2 == "d" and arg3 == "")
arg1, arg2, arg3 = cpystring.partition("hello", "o")
assert(arg1 == "hell" and arg2 == "o" and arg3 == "")
arg1, arg2, arg3 = cpystring.partition("hello", "ll")
assert(arg1 == "he" and arg2 == "ll" and arg3 == "o")
arg1, arg2, arg3 = cpystring.partition("hello", "hello")
assert(arg1 == "" and arg2 == "hello" and arg3 == "")
arg1, arg2, arg3 = cpystring.partition("l", "l")
assert(arg1 == "" and arg2 == "l" and arg3 == "")

-- #region test rpartition
arg1, arg2, arg3 = cpystring.rpartition("hello world", " ")
assert(arg1 == "hello" and arg2 == " " and arg3 == "world")
arg1, arg2, arg3 = cpystring.rpartition("hello", " ")
assert(arg1 == "" and arg2 == "" and arg3 == "hello")
arg1, arg2, arg3 = cpystring.rpartition("hello world", "o")
assert(arg1 == "hello w" and arg2 == "o" and arg3 == "rld")
arg1, arg2, arg3 = cpystring.rpartition("hello", "o")
assert(arg1 == "hell" and arg2 == "o" and arg3 == "")
arg1, arg2, arg3 = cpystring.rpartition("hello", "ll")
assert(arg1 == "he" and arg2 == "ll" and arg3 == "o")
arg1, arg2, arg3 = cpystring.rpartition("hello", "hello")
assert(arg1 == "" and arg2 == "hello" and arg3 == "")
arg1, arg2, arg3 = cpystring.rpartition("l", "l")
assert(arg1 == "" and arg2 == "l" and arg3 == "")

-- region test lstrip
assert(cpystring.lstrip("  hello world") == "hello world")
assert(cpystring.lstrip("hello world") == "hello world")
assert(cpystring.lstrip("hello world  ") == "hello world  ")
assert(cpystring.lstrip("  hello world  ") == "hello world  ")
assert(cpystring.lstrip("     ") == "")
assert(cpystring.lstrip("") == "")
assert(cpystring.lstrip("    \t\n\r\f\v ") == "")
assert(cpystring.lstrip("###== Header ==###", "#=") == " Header ==###")
assert(cpystring.lstrip("###== Header ==###", "###=") == " Header ==###")
assert(cpystring.lstrip("###== Header ==###", "###") == "== Header ==###")
assert(cpystring.lstrip("###== Header ==###", "=") == "###== Header ==###")
assert(cpystring.lstrip("###== Header ==###", "#= ") == "Header ==###")
assert(cpystring.lstrip("###== Header ==###", "") == "###== Header ==###")

-- region test rstrip
assert(cpystring.rstrip("  hello world") == "  hello world")
assert(cpystring.rstrip("hello world") == "hello world")
assert(cpystring.rstrip("hello world  ") == "hello world")
assert(cpystring.rstrip("  hello world  ") == "  hello world")
assert(cpystring.rstrip("     ") == "")
assert(cpystring.rstrip("") == "")
assert(cpystring.rstrip("    \t\n\r\f\v ") == "")
assert(cpystring.rstrip("###== Header ==###", "#=") == "###== Header ")
assert(cpystring.rstrip("###== Header ==###", "###=") == "###== Header ")
assert(cpystring.rstrip("###== Header ==###", "###") == "###== Header ==")
assert(cpystring.rstrip("###== Header ==###", "=") == "###== Header ==###")
assert(cpystring.rstrip("###== Header ==###", "#= ") == "###== Header")
assert(cpystring.rstrip("###== Header ==###", "") == "###== Header ==###")
assert(cpystring.rstrip("###== Header ==###", " ") == "###== Header ==###")
assert(cpystring.rstrip("###== Header ==###", "\t\n\r\f\v ") == "###== Header ==###")

-- region test strip
assert(cpystring.strip("  hello world") == "hello world")
assert(cpystring.strip("hello world") == "hello world")
assert(cpystring.strip("hello world  ") == "hello world")
assert(cpystring.strip("  hello world  ") == "hello world")
assert(cpystring.strip("     ") == "")
assert(cpystring.strip("") == "")
assert(cpystring.strip("    \t\n\r\f\v ") == "")
assert(cpystring.strip("###== Header ==###", "#=") == " Header ")
assert(cpystring.strip("###== Header ==###", "###=") == " Header ")
assert(cpystring.strip("###== Header ==###", "###") == "== Header ==")
assert(cpystring.strip("###== Header ==###", "=") == "###== Header ==###")
assert(cpystring.strip("###== Header ==###", "#= ") == "Header")
assert(cpystring.strip("###== Header ==###", "") == "###== Header ==###")
assert(cpystring.strip("###== Header ==###", " ") == "###== Header ==###")
assert(cpystring.strip("###== Header ==###", "\t\n\r\f\v ") == "###== Header ==###")
assert(cpystring.strip("###== Header ==###", " \t\n\r\f\v") == "###== Header ==###")
assert(cpystring.strip("###== Header ==###", " \t\n\r\f\v#") == "== Header ==")

-- region test 
assert(cpystring.map_format("hello {k} {v} .", {k = "world"}) == "hello k world .")
assert(cpystring.map_format("hello {k}{k} {v} .", {k = "world"}) == "hello kk world .")
assert(cpystring.map_format("hello {k} {v} .", {k = "world"}, "*") == "hello k world .")
assert(cpystring.map_format("hello {k} {v} .", {k = "world", v = "!"}) == "hello k world .hello v ! .")
assert(cpystring.map_format("hello {k} {v} .", {k = "world", v = "!"}, "*") == "hello k world .*hello v ! .")
assert(cpystring.map_format("", {k = "world", v = "!"}, "*") == "*")
assert(cpystring.map_format("", {}) == "")

print("test ok.")
